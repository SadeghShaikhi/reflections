
- What happens when you initialize a repository? Why do you need to do it?

+ a .git hidden directory will be created that will store all of your files previous version in it. as you commit. If you want to use git version control software you should do it. it's how git works.

________________________________________________________________________________________________________

- How is the staging area different from the working directory and the repository? What value do you think it offers?

+ staging area is a place that lets you store version of the files before commiting them, it's a bridge between working directory and repositoty. Let's say that we have a project that has 10 files in it and last feature that we have added(small logical change) only effects 3 files in the project.
If git didn't have staging area we should've creat a copy of all files even the ones that haven't changed. It would take more space and It would've been harder to debug.
so I think it's a pretty good thing.

________________________________________________________________________________________________________

- How can you use the staging area to make sure you have one commit per logical change?

+ You can just type git status to be sure what will have in your next commit. This is useful because one logical change can happen in modifing multiple files or maybe just one file. either case you can add just the files that you need.

________________________________________________________________________________________________________

- What are some situations when branches would be helpful in keeping your history organized? How would branches help?

+ IF your trying a new feauture that you are not sure it will work. or if there is two type of the software. or if you are writing the software in many languages.

_________________________________________________________________________________________________________

- How do the diagrams help you visualize the branch structure?

+ How? well they are like a map of all of your previous versions. They make undrestanding our whole project much more easier.

_________________________________________________________________________________________________________

- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

+ They two branch become one. So we are able to delete the small branch. All of the previous commits will be saved even if the small branch is deleted because all those commits are labled with the lable of 2 branches that merged together. If we remove a branch that it commits only have 1 lable commits will be deleted too.

___________________________________________________________________________________________________________

- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

+ It save us a lot of time when we there is no conflict. Also when there is conflict it directly shows us the conflict so it's still a huge save of time. If we do merges our self it might just take for ever....

____________________________________________________________________________________________________________
