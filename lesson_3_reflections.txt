- When would you want to use a remote repository rather than keeping all your work local?

+ When You're working on different computers or when you're working with a group on a project. In my openion
it's always a good idea to use a remote repository, even if none of the above situations are true, what if 
your files get deleted???

______________________________________________________________________________________

- Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

+ I think it's kina the same logic as commits. in the process of creating a feature you might creat dozens of commits. You might not want to show your commits to public before the feature is ready to go.

______________________________________________________________________________________

- Describe the differences between forks, clones, and branches. When would you use one instead of another?

+ Fork is used only on github servers. it's a way to copy a repository that the name of the first author is still hanging around.
Cloning doesn't care about the author of the repository and it's not accessable directly in github.
you should clone the repository in your computer and then make another remote for it.

______________________________________________________________________________________

- What is the benefit of having a copy of the last known state of the remote stored locally?

+ We can know that how different is local state with remote state by camparing them. 
we can also work with other people easier since we can compare our with their latest work.

______________________________________________________________________________________

- How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

+ It would've been a nightmare.Github is really efficiant. no more comments.

______________________________________________________________________________________

- When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

+ When You want to add a new feature that your not sure will work or others will like it. or maybe when you just wanna play with the code. it's easier to use branches because if it worked you can merge it. and if it didn't you can always come back to it without being worried about any changes that others or yourself have made.

______________________________________________________________________________________





